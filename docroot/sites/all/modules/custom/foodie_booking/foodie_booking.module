<?php
/**
 * @file
 * Code for the Foodie Booking feature.
 */

/*----------------------------------------------------------------------------
      SETUP & CONFIG
----------------------------------------------------------------------------*/

include_once 'foodie_booking.features.inc';

define('FOODIE_BOOKING_PATH', drupal_get_path('module', 'foodie_booking'));

/*----------------------------------------------------------------------------
      DRUPAL HOOKS
----------------------------------------------------------------------------*/

/**
 * Implements hook_init().
 */
function foodie_booking_init() {
  // users don't need access to these internal pages
  if (preg_match('#^(booking|seating)#', $_GET['q'])) {
    drupal_goto();
  }
}

/**
 * Implements hook_form_alter().
 */
function foodie_booking_form_alter(&$form, &$form_state, $form_id) {
  // booking restaurant
  if (preg_match('#eck__entity__form_(add|edit)_booking_restaurant#', $form_id)) {
    // flag to mark an existing entity (ie. updating instead of adding)
    $updating = isset($form['#entity']->id);

    // make title non-required and hide it; we'll automatically generate a value for it
    // in hook_entity_presave()
    $form['title']['#required'] = FALSE;
    $form['title']['#weight'] = -99;
    $form['title']['#access'] = FALSE;

    // add description to name field
    $lang = $form['field_name']['#language'];
    $form['field_name'][$lang][0]['value']['#description'] = t('Please enter your full name.');

    // add description to phone field & clear 
    $form['field_phone'][$lang][0]['value']['#description'] = t('Format: 1 (123) 123-1234');
    $form['field_phone']['#suffix'] = '<div class="clear"></div>';

    // add clear after num people
    $form['field_num_people']['#suffix'] = '<div class="clear"></div>';

    // update Submit button text on creation
    $form['submit']['#value'] = t('Make Reservation');

    // update Submit button text on edit
    if ($updating) {
      $form['submit']['#value'] = t('Update Reservation');
    }

    // add class so we can target the form and add CSS
    $form['#attributes']['class'] = 'booking-entity-form';
    $form['#attached']['css'][] = FOODIE_BOOKING_PATH . '/css/foodie_booking.css';
    $form['#attached']['js'][] = FOODIE_BOOKING_PATH . '/js/foodie_booking.js';

    // form handlers
    $form['#after_build'][] = 'foodie_booking_restaurant_after_build';
    $form['#validate'][] = 'foodie_booking_restaurant_validate';
  }
  elseif (preg_match('#eck__entity__form_(add|edit)_seating_table#', $form_id)) {
    $form['title']['#description'] = t('Enter a title to identify this seating item.');
  }
}

/**
 * Implements hook_entity_presave().
 */
function foodie_booking_entity_presave($entity, $type) {
  if ($type == 'booking') {
    if ($entity->type == 'restaurant') {
      $wrapper = entity_metadata_wrapper($type, $entity);

      $seating_type_options = $wrapper->field_seating_type->optionsList();

      $wrapper->title->set(t('!seating - !name - !num - !date', array(
        '!seating' => $seating_type_options[$wrapper->field_seating_type->value()],
        '!name' => $wrapper->field_name->value(),
        '!num' => $wrapper->field_num_people->value(),
        '!date' => format_date($wrapper->field_date->value(), 'simple'),
      )));
    }
  }
}

/**
 * Implements hook_block_info().
 */
function foodie_booking_block_info() {
  $blocks['make_restaurant_reservation'] = array(
    'info' => t('Make Restaurant Reservation'),
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function foodie_booking_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'make_restaurant_reservation':
      $booking = entity_create('booking', array('type' => 'restaurant'));
      $form = drupal_get_form('eck__entity__form_add_booking_restaurant', $booking);

      $block['subject'] = t('Make Restaurant Reservation');
      $block['content'] = array(
        '#markup' => drupal_render($form),
      );

      break;
  }

  return $block;
}

/*----------------------------------------------------------------------------
      MODULE HOOKS
----------------------------------------------------------------------------*/

/*----------------------------------------------------------------------------
      FORMS
----------------------------------------------------------------------------*/

/**
 * After-build handler for eck__entity__form_add|edit_booking_restaurant
 * @param  [type] $form       [description]
 * @param  [type] $form_state [description]
 * @return [type]             [description]
 */
function foodie_booking_restaurant_after_build($form, $form_state) {
  $updating = isset($form['#entity']->id);

  // update the date field's description & default value  
  $lang = $form['field_date']['#language'];
  foreach ($form['field_date'][$lang] as &$item) {
    if (isset($item['value']['time'])) {
      // set default time value, but not if the form was submitted or
      // if we're editing an existing entity
      if (!isset($form_state['triggering_element']) && !$updating) {
        $item['value']['time']['#value'] = '17:00';
      }

      $item['value']['time']['#description'] .= '. ' . t('Reservations can be made between 17:00 and 21:00.');
    }
  }

  return $form;
}

/**
 * Validation handler for for eck__entity__form_add|edit_booking_restaurant
 */
function foodie_booking_restaurant_validate($form, &$form_state) {
  // flag to mark an existing entity (ie. updating instead of adding)
  $updating = isset($form['#entity']->id);

  $values = $form_state['values'];

  // depending on the state of validation of other fields, the value in field_date
  // can be either a string or a timestamp... because Drupal, that's why.
  $date_val = _single_form_value($values['field_date']);
  if (is_numeric($date_val)) {
    $date = new DateTime();
    $date->setTimestamp($date_val);
  }
  else {
    $date = new DateTime($date_val);
  }

  // we're closed Sundays
  if ($date->format('l') == 'Sunday') {
    form_set_error('field_date', t('The restaurant is closed on Sundays.'));
  }

  // we're only open 5-10pm, so the latest acceptable reservation is at 21:00
  $hour = $date->format('G');
  if ($hour < 15 || $hour > 21) {
    form_set_error('field_date', t('Reservations must be between 17:00 and 21:00 hours.'));
  }

  // account for past dates, but not when updating reservations
  if (!$updating) {
    $now  = new DateTime();
    $diff = $now->diff($date);
    if ($diff->invert) {
      form_set_error('field_date', t('Reservations can only be made for future dates.'));
    }
  }

  // figure out whether we can fit this reservation
  if ($seating_type = _single_form_value($values['field_seating_type'])) {
    $query = new Foodie\EFQ();
    $query->entityCondition('entity_type', 'seating')
      ->entityCondition('bundle', $seating_type);

    if ($result = $query->execute()) {
      // build a data structure containing all possible seats (the "seat bank")
        $all_seats = _build_seat_bank(array_keys($result['seating']));

      // pull up all reservations for the same seating type that are +/- 45min of current item
      // as that's the interval which will overlap and may have conflicts
        $date_interval = new DateInterval('PT' . (60 * 45) . 'S');

        $date_lower = clone $date;
        $date_lower->sub($date_interval);

        $date_upper = clone $date;
        $date_upper->add($date_interval);
      
        $query = new Foodie\EFQ();
        $query->entityCondition('entity_type', 'booking')
          ->entityCondition('bundle', 'restaurant')
          ->fieldCondition('field_date', 'value', $date_lower->getTimestamp(), '>=')
          ->fieldCondition('field_date', 'value', $date_upper->getTimestamp(), '<=')
          ->fieldCondition('field_seating_type', 'value', $seating_type)
          ->fieldOrderBy('field_date', 'value', 'ASC');

      // go through existing reservations and remove the required seats from our seat bank
        if ($result = $query->execute()) {
          if ($updating) {
            unset($result['booking'][$form['#entity']->id]);
          }

          $bookings = entity_load('booking', array_keys($result['booking']));

          _remove_reserved_seating($all_seats, $bookings);
        }

      // now that we've removed seats which are already booked, we check what's left
      // to see whether we can fit the current party
        $can_reserve = FALSE;
        $num_party = _single_form_value($values['field_num_people']);

        if ($all_seats) {
          foreach (array_keys($all_seats) as $capacity) {
            if ($capacity >= $num_party) {
              $can_reserve = TRUE;
              break;
            }
          }
        }

      // final error out
        if (!$can_reserve) {
          form_set_error('field_num_people', t('We cannot accomodate a party of your size at the requested time.'));

          // track the reservation denial
          $denial_counter = variable_get('foodie_booking_reservation_denial', 0);
          $denial_counter++;

          variable_set('foodie_booking_reservation_denial', $denial_counter);
        }
    }
  }
}

/*----------------------------------------------------------------------------
      INTERNAL
----------------------------------------------------------------------------*/

/**
 * Helper for easier access to submitted form values.
 * 
 * @param  [type] $field [description]
 * @param  string $key   [description]
 * @return [type]        [description]
 */
function _single_form_value($field, $key = 'value') {
  return current(current($field))[$key];
}

/**
 * Builds an array structure containing all available seating options
 * from specified seating ids.
 * 
 * @param  [type] $ids [description]
 * @return [type]      [description]
 */
function _build_seat_bank($ids) {
  $all_seats = array();

  $seating = entity_load('seating', $ids);
  foreach ($seating as $seat) {
    $wrapper = entity_metadata_wrapper('seating', $seat);
    // table
    if (isset($wrapper->field_num_seats)) {
      $num_seats = $wrapper->field_num_seats->value();
    }
    // bar
    else {
      $num_seats = 1;
    }

    $all_seats[$num_seats][] = $seat->id;
  } 

  // sort the seat bank by table capacity for optimal seating selections
  // below
  ksort($all_seats);

  return $all_seats;
}

/**
 * Removes the necessary reserved seating from the seat bank, based on
 * the reservations.
 * 
 * @param  [type] $seat_bank [description]
 * @param  [type] $bookings  [description]
 * @return [type]            [description]
 */
function _remove_reserved_seating(&$seat_bank, $bookings) {
  foreach ($bookings as $booking) {
    $wrapper = entity_metadata_wrapper('booking', $booking);
    $num_people = $wrapper->field_num_people->value();
    
    // the party number matches a single table's capacity
    if (isset($seat_bank[$num_people])) {
      _grab_seat($seat_bank, $num_people);
    }
    else {
      foreach (array_keys($seat_bank) as $capacity) {
        if ($capacity >= $num_people) {
          _grab_seat($seat_bank, $capacity);
        }
      }
    }
  }
}

/**
 * Occupies a seat of given capacity in seat bank.
 * 
 * @param  [type] $seat_bank [description]
 * @param  [type] $capacity  [description]
 * @return [type]            [description]
 */
function _grab_seat(&$seat_bank, $capacity) {
  array_pop($seat_bank[$capacity]);

  // was this the last table with this capacity?
  if (empty($seat_bank[$capacity])) {
    unset($seat_bank[$capacity]);
  }
}

/**
 * Counts the number of grandchildren by counting children & grandchildren,
 * and then subtracting the children
 * 
 * @param  [type] $data [description]
 * @return [type]       [description]
 */
function _count_grandchildren($data) {
  return sizeof($data, COUNT_RECURSIVE) - sizeof($data);
}